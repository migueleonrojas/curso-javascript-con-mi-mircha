ISOMORFISMO = hacer una aplicacion de principio a fin con una sola tecnologia

Hoy JavaScript. es el unico lenguaje capaz de ejecutarse en las 3 capas de una aplicacion:
1. Frontend (JavaScript 
2. Backend (Nodes). 
3. Persistencia de Datos (MongoDB, Couch DB, Firebase, etc). 


Con JavaScript puedes:

- Diseño y Desarrollo Web.
- Hacer Videojuegos
- Experiencias 3D, Realidad Aumentada, Realidad Virtual.
- Controlar Hardware (Drones, robots, electrodomésticos).
- Aplicaciones Hibridas y Moviles.
- Machine Learning
- Etc

Caracteristicas

- Lenguaje de Alto Nivel
- Interpretado
- Dinamico
- Débilmente Tipado
- Multi paradigma
- Sensible a MAYUSCULAS y minusculas
- No necesitas los puntos y comas al final de cada linea

Escritura de codigo

Los identificadores deben comenzar con:
- Una letra o
- Un signo de dolar $ o
- Un guion bajo _
- Nunca con numeros o caracteres especiales

Usa snake_case en:

    - Archivos:

        mi_archivo_javascript.js

Usa UPPER_CASE en
    - Constantes:

        const UNA_CONSTANTE = 'Soy una constante’,
            PI = 3.141592653589793

Usa UpperCamelCase en:

    - Clases:

        class SerHumano {
            constructor (nombre, genero) {
                this.nombre = nombre
                this.genero = genero
            }
        

            miNombreEs () {
                return `Mi nombre es ${this.nombre}`
            }
        }

Usa lowerCamelCase en:

    - Objetos:

        const unObjeto = {
            nombre: 'Jonathan',
            email: 'jonmircha@gmail.com'
        }

    - Primitivos:

        let unaCadena = 'Hola mundo',
            unNumero = 19;
            unBooleano = true

    - Funciones:

        function holaMundo (nombre) {
            alert( `Hola mundo ${nombre}` )
        }

        holaMundo('Jonathan');

    - Instancias:

        const ajax = new XMLHttpRequest(),
            jon = new SerHumano('Jonathan', 'Hombre')

Palabras reservadas:

    A: abstract,
    B: boolean, break, byte
    C: case, catch, char, class, const, continue
    D: debugger, default, delete, do, double
    E: else, enum, export, extends
    F: false, final, finally, float, for, function
    G: goto
    I: if, implements, import, in, instanceof, int, interface
    L: long
    N: native, new, null
    P: package, private, protected, public
    R: return
    S: short, static, super, switch, synchronized
    T: this, throw, throws, transient, true, try, typeof
    V: var, volatile, void
    W: while, with

Ordenamiento de codigo

    1. IMPORTACION DE MODULOS.
    2. DECLARACION DE VARIABLES.
    3. DECLARACION DE FUNCIONES.
    4. EJECUCION DE CODIGO.

Tipos de datos en JavaScript

    1. Primitivos: Se accede directamente al valor.
        - string
        - number
        - boolean
        - null
        - undefined
        - NaN

    2. Compuestos: Se accede a la referencia del valor.
        - object={}
        - array=[]
        - function () {}
        - Class {}
        - etc



 












